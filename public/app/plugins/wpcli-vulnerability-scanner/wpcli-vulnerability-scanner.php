<?php
/**
 * Plugin Name:       10up WP-CLI Vulnerability Scanner
 * Plugin URI:        https://github.com/10up/wpcli-vulnerability-scanner
 * Description:       WP-CLI command only. Check WordPress code, installed plugins and themes for vulnerabilities.
 * Version:           1.1.0
 * Requires at least: 3.7
 * Requires PHP:      5.4
 * Tested up to:      5.9
 * Author:            10up
 * Author URI:        https://10up.com
 * License:           MIT
 * License URI:       https://spdx.org/licenses/MIT.html
 * Update URI:        https://github.com/10up/wpcli-vulnerability-scanner
 */

if ( ! defined( 'WP_CLI' ) ) {
	return;
}

// Include Vulnerability Scanner API service classes.
require_once __DIR__ . '/includes/class-vuln-service.php';
require_once __DIR__ . '/includes/class-vuln-wpscan-service.php';
require_once __DIR__ . '/includes/class-vuln-patchstack-service.php';

// Ensure we don't load our class more than once.
if ( class_exists( 'Vulnerability_CLI' ) ) {
	WP_CLI::add_command( 'vuln', 'Vulnerability_CLI' );
	return;
}

/**
 * WP-CLI Vulnerability Scanner
 */
class Vulnerability_CLI extends WP_CLI_Command {

	/**
	 */
	var $porcelain;

	/**
	 */
	var $test;

	/**
	 */
	var $update_list;

	/**
	 */
	var $assoc_args_wordpress;

	/**
	 */
	var $assoc_args_plugin;

	/**
	 */
	var $assoc_args_theme;

	/**
	 * Flag for nagios
	 */
	var $nagios_op;

	/**
	 * Flag for mail
	 */
	var $mail;

	/**
	 * Vulnerability Scanner API Service
	 *
	 * @var object
	 */
	private $service;

	/**
	 * Check plugins and themes for reported vulnerabilities.
	 *
	 * ## OPTIONS
	 *
	 * [--test]
	 * : Load test plugin/theme data
	 *
	 * [--nagios]
	 * : Output for nagios
	 *
	 * [--mail]
	 * : Mail nagios output if any vulnerability found
	 *
	 * [--format=<format>]
	 * : Accepted values: table, csv, json, count, ids, yaml. Default: table
	 *
	 * ## EXAMPLES
	 *
	 *     wp vuln status
	 *     wp vuln status --not-themes
	 *
	 * @subcommand status
	 */
	public function status( $args, $assoc_args ) {

		$this->init( $assoc_args );
		$this->porcelain = false;
		$this->test      = isset( $assoc_args['test'] );

		$this->nagios_op = isset( $assoc_args['nagios'] );
		$this->mail      = isset( $assoc_args['mail'] ) ? $assoc_args['mail'] : '';

		$this->update_list = array();

		// need a copy because it's passed by ref and destroyed in the formatter.
		$this->assoc_args_plugin    = $assoc_args;
		$this->assoc_args_theme     = $assoc_args;
		$this->assoc_args_wordpress = $assoc_args;

		global $wp_version;

		if ( $this->nagios_op ) {
			$this->_do_nagios_op( array( 'wordpress', 'plugin', 'theme' ) );
		}

		if ( 'json' == $this->{ $assoc_args }['format'] ) {
			echo '{"core":';
			$this->_do_wordpress();
			echo ',"plugins":';
			$this->_do_plugins();
			echo ',"themes":';
			$this->_do_themes();
			echo '}';
			exit( 0 );
		}

		WP_CLI::log( WP_CLI::colorize( '%GWordPress ' . $wp_version . ' %n' ) );
		$this->_do_wordpress();
		WP_CLI::log( WP_CLI::colorize( '%GPlugins%n' ) );
		$this->_do_plugins();
		WP_CLI::log( WP_CLI::colorize( '%GThemes%n' ) );
		$this->_do_themes();

	}

	/**
	 * Check WordPress core for reported vulnerabilities.
	 *
	 * ## OPTIONS
	 *
	 * [--nagios]
	 * : Output for nagios
	 *
	 * [--mail]
	 * : Mail nagios output if any vulnerability found
	 *
	 * [--format=<format>]
	 * : Accepted values: table, csv, json, count, ids, yaml. Default: table
	 *
	 * ## EXAMPLES
	 *
	 *     wp vuln core-status
	 *
	 * @subcommand core-status
	 */
	public function core_status( $args, $assoc_args ) {

		$this->init( $assoc_args );
		$this->porcelain = isset( $assoc_args['porcelain'] );
		$this->test      = isset( $assoc_args['test'] );

		$this->nagios_op = isset( $assoc_args['nagios'] );
		$this->mail      = isset( $assoc_args['mail'] ) ? $assoc_args['mail'] : '';

		$this->update_list = array();

		// need a copy because it's passed by ref and destroyed in the formatter.
		$this->assoc_args_wordpress = $assoc_args;

		if ( $this->nagios_op ) {
			$this->_do_nagios_op( array( 'wordpress' ) );
		}

		$this->_do_wordpress();
	}

	/**
	 * Check plugins for reported vulnerabilities.
	 *
	 * ## OPTIONS
	 *
	 * [--porcelain]
	 * : Print only slugs of plugins with updates
	 *
	 * [--test]
	 * : Load test plugin/theme data
	 *
	 * [--nagios]
	 * : Output for nagios
	 *
	 * [--mail]
	 * : Mail nagios output if any vulnerability found
	 *
	 * [--format=<format>]
	 * : Accepted values: table, csv, json, count, ids, yaml. Default: table
	 *
	 * ## EXAMPLES
	 *
	 *     wp vuln plugin-status
	 *
	 * @subcommand plugin-status
	 */
	public function plugin_status( $args, $assoc_args ) {

		$this->init( $assoc_args );
		$this->porcelain = isset( $assoc_args['porcelain'] );
		$this->test      = isset( $assoc_args['test'] );

		$this->nagios_op = isset( $assoc_args['nagios'] );
		$this->mail      = isset( $assoc_args['mail'] ) ? $assoc_args['mail'] : '';

		$this->update_list = array();
		// need a copy because it's passed by ref and destroyed in the formatter.
		$this->assoc_args_plugin = $assoc_args;

		if ( $this->nagios_op ) {
			$this->_do_nagios_op( array( 'plugin' ) );
		}
		$this->_do_plugins();

	}

	/**
	 * Check themes for reported vulnerabilities.
	 *
	 * ## OPTIONS
	 *
	 * [--porcelain]
	 * : Print only slugs of themes with updates
	 *
	 * [--test]
	 * : Load test theme/theme data
	 *
	 * [--nagios]
	 * : Output for nagios
	 *
	 * [--format=<format>]
	 * : Accepted values: table, csv, json, count, ids, yaml. Default: table
	 *
	 * ## EXAMPLES
	 *
	 *     wp vuln theme-status
	 *
	 * @subcommand theme-status
	 */
	public function theme_status( $args, $assoc_args ) {

		$this->init( $assoc_args );
		$this->porcelain = isset( $assoc_args['porcelain'] );
		$this->test      = isset( $assoc_args['test'] );

		$this->nagios_op = isset( $assoc_args['nagios'] );

		$this->update_list = array();

		// need a copy because it's passed by ref and destroyed in the formatter.
		$this->assoc_args_theme = $assoc_args;

		if ( $this->nagios_op ) {
			$this->_do_nagios_op( array( 'theme' ) );
		}

		$this->_do_themes();

	}

	/**
	 * Check any given theme.
	 *
	 * ## OPTIONS
	 *
	 * [<slug>...]
	 * : theme slug to check
	 *
	 * [--version]
	 * : Version if other than latest. Only applies if one slug provided
	 *
	 * [--format=<format>]
	 * : Accepted values: table, csv, json, count, ids, yaml. Default: table
	 *
	 * ## EXAMPLES
	 *
	 *     wp vuln theme-check
	 *
	 * @subcommand theme-check
	 */
	public function theme_check( $args, $assoc_args ) {

		$this->init( $assoc_args );
		if ( count( $args ) > 1 ) {
			$version = 0;
		} else {
			$version = isset( $assoc_args['version'] ) ? $assoc_args['version'] : 0;

		}

		$display = array();
		foreach ( $args as $slug ) {
			$status  = $this->service->check_status( $slug, $version, 'theme' );
			$display = array_merge( $display, $status );
		}

		$formatter = new \WP_CLI\Formatter(
			$assoc_args,
			array(
				'name',
				'installed version',
				'status',
				'fix',
			),
			'themes',
		);
		$formatter->display_items( $display );

	}

	/**
	 * Check any given plugin.
	 *
	 * ## OPTIONS
	 *
	 * [<slug>...]
	 * : plugin slug to check
	 *
	 * [--version]
	 * : Version if other than latest. Only applies if one slug provided
	 *
	 * [--format=<format>]
	 * : Accepted values: table, csv, json, count, ids, yaml. Default: table
	 *
	 * ## EXAMPLES
	 *
	 *     wp vuln plugin-check
	 *
	 * @subcommand plugin-check
	 */
	public function plugin_check( $args, $assoc_args ) {

		$this->init( $assoc_args );
		if ( count( $args ) > 1 ) {
			$version = 0;
		} else {
			$version = isset( $assoc_args['version'] ) ? $assoc_args['version'] : 0;

		}

		$display = array();
		foreach ( $args as $slug ) {
			$status  = $this->service->check_status( $slug, $version, 'plugin' );
			$display = array_merge( $display, $status );
		}

		$formatter = new \WP_CLI\Formatter(
			$assoc_args,
			array(
				'name',
				'installed version',
				'status',
				'fix',
			),
			'plugins',
		);
		$formatter->display_items( $display );

	}

	/**
	 * Init Scanner API service
	 *
	 * @param array $assoc_args Array of command arguments.
	 *
	 * @since 2.0.0
	 */
	private function init( $assoc_args ) {
		if ( defined( 'VULN_API_PROVIDER' ) && 'patchstack' === VULN_API_PROVIDER ) {
			$this->service = new Vuln_Patchstack_Service( $assoc_args );
		} else {
			$this->service = new Vuln_WPScan_Service( $assoc_args );
		}
	}

	/**
	 * Do WordPress core check
	 *
	 * @return void
	 */
	private function _do_wordpress() {

		$singular_type = 'wordpress';
		$plural_type   = 'wordpresses';

		$assoc_args = "assoc_args_{$singular_type}";

		$display     = $this->service->check_wordpress();
		$update_list = $this->_extract_updatable_items( $display );

		$display_format = isset( $this->$assoc_args['format'] ) && ! empty( $this->$assoc_args['format'] ) ? $this->$assoc_args['format'] : 'table';
		$display        = $this->format_data_for_return( $display_format, $display );

		// Pretty print.
		if ( ! $this->porcelain ) {
			$formatter = new \WP_CLI\Formatter(
				$this->$assoc_args,
				array(
					'name',
					'installed version',
					'status',
					'introduced in',
					'fix',
				),
				$plural_type,
			);
			// Add second array parameter to indicate the position of the column having a maybe colorized item.
			$formatter->display_items(
				$display,
				array(
					true,
					false,
					false,
					false,
					false,
				)
			);
			// Improve readeability: force new line.
			if ( 'ids' === $display_format ) {
				WP_CLI::log( '' );
			}
		} elseif ( $update_list ) {
			WP_CLI::log( implode( ' ', $update_list ) );
			die;
		}
	}

	/**
	 * Helper. Call worker for plugin tasks
	 *
	 * @return void
	 */
	private function _do_plugins() {
		$this->_do_thing( 'plugin' );
	}

	/**
	 * Helper. Call worker for theme tasks
	 *
	 * @return void
	 */
	private function _do_themes() {
		$this->_do_thing( 'theme' );
	}

	/**
	 * Worker. Do what's needed for plugins/themes
	 * Display table, or if --porcelain, display only updatable slugs
	 *
	 * @param string|array $type The "thing" we're checking.
	 *                           If string, it's pluralized with an "s"
	 *                           If array, should be [ single, plural ].
	 *
	 * @return void
	 */
	private function _do_thing( $type ) {
		list( $singular_type, $plural_type ) = $this->_get_slugs( $type );

		$assoc_args = "assoc_args_{$singular_type}";

		$display     = $this->service->check_thing( $singular_type );
		$update_list = $this->_extract_updatable_items( $display );

		$display_format = isset( $this->$assoc_args['format'] ) && ! empty( $this->$assoc_args['format'] ) ? $this->$assoc_args['format'] : 'table';
		$display        = $this->format_data_for_return( $display_format, $display );

		// Pretty print.
		if ( ! $this->porcelain ) {

			$formatter = new \WP_CLI\Formatter(
				$this->$assoc_args,
				array(
					'name',
					'installed version',
					'status',
					'introduced in',
					'fix',
				),
				$plural_type,
			);
			// Add second array parameter to indicate the position of the column having a maybe colorized item.
			$formatter->display_items(
				$display,
				array(
					true,
					false,
					false,
					false,
					false,
				)
			);

			// if plugins need updating, do or tell the user.
			if ( $update_list ) {
				// it would be nice to show this, but we'd need to rewrite the unit test
				//              $update_list = implode( ' ', $update_list );
				//              WP_CLI::log( "Run `wp $singular_type update $update_list`" );
			} elseif( ( isset( $this->{$assoc_args}['format'] ) && 'json' != $this->$assoc_args['format'] ) ) {
				WP_CLI::log( 'Nothing to update' );
			}

			// Improve readeability: force new line.
			if ( 'ids' === $display_format ) {
				WP_CLI::log( '' );
			}
		} elseif ( $update_list ) {
			WP_CLI::log( implode( ' ', $update_list ) );
			die;
		}
	}

	/**
	 * Pull updatable items from Formatter-ready array
	 *
	 * @param array $data Formatter-ready data.
	 *
	 * @return array Simple array of plugin/theme slugs needing to be updated
	 */
	private function _extract_updatable_items( $data ) {
		$update_list = wp_list_pluck( wp_list_filter( $data, array( 'action' => 'update' ) ), 'action', 'slug' );
		$update_list = array_keys( $update_list );

		return $update_list;
	}

	/**
	 * Get singular and plural slugs for given string or array
	 *
	 * @param string|array $singular_or_array If string, it's pluralized with an "s"
	 *                           If array, should be [ single, plural ].
	 *
	 * @return array
	 */
	private function _get_slugs( $singular_or_array ) {
		if ( is_array( $singular_or_array ) ) {
			$singular_type = $singular_or_array[0];
			$plural_type   = $singular_or_array[1];
		} else {
			$singular_type = $singular_or_array;
			$plural_type   = "{$singular_or_array}s";
		}

		return array( $singular_type, $plural_type );
	}

	/**
	 * Do nagios output.
	 *
	 * @param array $things type (WordPress,plugin,theme).
	 */
	private function _do_nagios_op( $things ) {
		if ( ! empty( $things ) && is_array( $things ) ) {

			$wp_list = 0;
			$pl_list = 0;
			$th_list = 0;

			if ( in_array( 'wordpress', $things ) ) {
				$wp_vulns = $this->service->check_wordpress();
				if ( ! empty( $wp_vulns ) && is_array( $wp_vulns ) ) {
					foreach ( $wp_vulns as $wp_vuln ) {
						if ( isset( $wp_vuln['fix'] ) && 'n/a' != $wp_vuln['fix'] ) {
							$wp_list ++;
						}
					}
				}
			}
			if ( in_array( 'plugin', $things ) ) {
				$plugins = $this->service->check_thing( 'plugin' );
				if ( ! empty( $plugins ) && is_array( $plugins ) ) {
					foreach ( $plugins as $plugin ) {
						if ( isset( $plugin['fix'] ) && 'n/a' != $plugin['fix'] ) {
							$pl_list ++;
						}
					}
				}
			}
			if ( in_array( 'theme', $things ) ) {
				$themes = $this->service->check_thing( 'theme' );
				if ( ! empty( $themes ) && is_array( $themes ) ) {
					foreach ( $themes as $theme ) {
						if ( isset( $theme['fix'] ) && 'n/a' != $theme['fix'] ) {
							$th_list ++;
						}
					}
				}
			}

			if ( empty( $wp_list ) && empty( $pl_list ) && empty( $th_list ) ) {
				WP_CLI::line( 'OK - no vulnerabilities found' );
				exit( 0 );
			} else {
				$message = sprintf(
					'CRITICAL - %d core, %d plugin and %d theme vulnerabilities found',
					$wp_list,
					$pl_list,
					$th_list
				);
				WP_CLI::line( $message );

				// Notify via mail.
				if ( ! empty( $this->mail ) ) {

					$site_url = site_url();
					$headers  = array();

					/*
					 * In CLI if $_SERVER['SERVER_NAME'] isn't set than it fails to send mail.
					 * Reason being, this property is used to create "From" mail header.
					 * If it's empty, we need to pass that in header.
					 */
					if ( empty( $_SERVER['SERVER_NAME'] ) ) {
						$sitename = $site_url;
						if ( substr( $sitename, 0, 8 ) == 'https://' ) {
							$sitename = substr( $sitename, 8 );
						}
						if ( substr( $sitename, 0, 7 ) == 'http://' ) {
							$sitename = substr( $sitename, 7 );
						}
						if ( substr( $sitename, 0, 4 ) == 'www.' ) {
							$sitename = substr( $sitename, 4 );
						}

						$from_email = 'wordpress@' . $sitename;

						$headers[] = "From:{$from_email}";
					}

					$subject = 'Vulnerabilities found in ' . $site_url;
					if ( ! wp_mail( $this->mail, $subject, $message, $headers ) ) {
						WP_CLI::line( 'Not able to send mail.' );
					}
				}

				exit( 2 );
			}
		}
	}

	/**
	 * Format data before output based on --format parameter passed to command.
	 *
	 * @param string $output_format  One of table, csv, json, count, ids, yaml.
	 * @param array  $data           Array having report details.
	 * @return array $applied_format Array for correct output.
	 */
	protected function format_data_for_return( $output_format, $data ) {

		switch ( $output_format ) {
			case 'ids':
				$applied_format = array_filter( wp_list_pluck( $data, 'id' ) );
				break;
			default:
				$applied_format = $data;
		}

		return $applied_format;
	}
}

WP_CLI::add_command( 'vuln', 'Vulnerability_CLI' );
